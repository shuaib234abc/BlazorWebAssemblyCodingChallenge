@*
references
1. Commenting in Razor: 
        https://stackoverflow.com/questions/3382903/razor-comment-syntax
2. Basics of Razor components in Blazor WebAssembly: 
        https://www.c-sharpcorner.com/blogs/create-a-net-6-app-on-blazor-wasm-for-crud-operations-with-ef-core
3. Registering JSRuntime:
        https://stackoverflow.com/questions/63744068/jsruntime-is-not-registered-blazor
4. Passing arguments to onclick function:
        https://stackoverflow.com/questions/54297711/blazor-how-to-pass-arguments-to-onclick-function
5. Stopping event propagation for a client side function:
        https://stackoverflow.com/questions/61579284/how-to-stop-event-propagation-in-blazor-server-app
*@

@page "/orders"
@using CodingChallengeV1.Entity.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="float:right;clear:both;margin-bottom:15px">
        <a class="btn btn-primary" href="/addorder">Add new order</a>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>State</th>
                <th>Number of windows</th>
                <th colspan="3">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var singleOrder in orders)
            {
                <tr>
                    <td>@singleOrder.Name</td>
                    <td>@singleOrder.State</td>
                    <td>@singleOrder.Windows.Count</td>
                    <td><a href="/vieworder/@singleOrder.Id" class="btn btn-primary btn-sm">View / Edit</a></td>
                    <td @onclick:stopPropagation="true" @onclick:preventDefault="true">
                        <a @onclick="@(e => DeleteOrder(@singleOrder.Id))" href="" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Order[]? orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await Http.GetFromJsonAsync<Order[]>("api/Order");
    }

    private async Task DeleteOrder(int order_id_to_delete)
    {
        await JSRuntime.InvokeVoidAsync("alert", order_id_to_delete);
        bool confirmStatus = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure that you want to delete?");
        if (confirmStatus)
        {
            var response = await Http.DeleteAsync("api/Order/" + order_id_to_delete);
            bool operationStatus = await response.Content.ReadFromJsonAsync<bool>();
            if (operationStatus)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Order deleted successfully!");
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
            }
        }
    }
}
