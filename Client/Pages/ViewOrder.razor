@*
references
1. Commenting in Razor:
        https://stackoverflow.com/questions/3382903/razor-comment-syntax
2. Basics of Razor components in Blazor WebAssembly:
        https://www.c-sharpcorner.com/blogs/create-a-net-6-app-on-blazor-wasm-for-crud-operations-with-ef-core
3. Registering JSRuntime:
        https://stackoverflow.com/questions/63744068/jsruntime-is-not-registered-blazor
4. Using URL parameters in Razor view: 
        https://medium.com/it-dead-inside/lets-learn-blazor-working-with-url-parameters-and-query-strings-37e1f8aacec7
5. Passing arguments to onclick function:
        https://stackoverflow.com/questions/54297711/blazor-how-to-pass-arguments-to-onclick-function
6. Stopping event propagation for a client side function:
        https://stackoverflow.com/questions/61579284/how-to-stop-event-propagation-in-blazor-server-app
*@

@page "/vieworder/{order_id:int?}"
@using CodingChallengeV1.Entity.Models
@using CodingChallengeV1.DTO
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>View / Edit Order</PageTitle>

<h1>View / Edit Order</h1>

<div class="left_floated_items_container div_view_order_page">
    <div class="add_order_left_floated_item">

        @if (@order.Windows.Count > 0)
        {
            <table>
                <tr>
                    <td>Order name</td>
                    <td @onclick:stopPropagation="true" @onclick:preventDefault="true">
                        @order.Name <a class="a_order_inline" @onclick="EditOrder" href=""><span class="oi oi-pencil" aria-hidden="true"></span></a>
                    </td>
                </tr>
                <tr>
                    <td>State</td>
                    <td>@order.State</td>
                </tr>
                <tr>
                    <td>Number of windows</td>
                    <td>@order.Windows.Count</td>
                </tr>
                @for (var i = 0; i < order.Windows.Count; i++)
                {
                    var local_of_i = i;
                    <tr>
                        <td @onclick:stopPropagation="true" @onclick:preventDefault="true">
                            Window # @(i + 1)
                            <br />
                            <a class="a_order_inline" @onclick="@(e => EditWindow(local_of_i))" href=""><span class="oi oi-pencil" aria-hidden="true"></span></a>
                            <a class="a_order_inline" @onclick="@(e => DeleteWindow(local_of_i))" href=""><span class="oi oi-trash" aria-hidden="true"></span></a>
                        </td>
                        <td>
                            <table>
                                <tr>
                                    <td>Window name</td>
                                    <td>@order.Windows[i].Name</td>
                                </tr>
                                <tr>
                                    <td>Quantity of windows</td>
                                    <td>@order.Windows[i].QuantityOfWindows</td>
                                </tr>
                                <tr>
                                    <td>Total sub elements</td>
                                    <td>@order.Windows[i].TotalSubElements</td>
                                </tr>
                                @for (var j = 0; j < order.Windows[i].SubElements.Count; j++)
                                {
                                    var local_of_j = j;
                                    <tr>
                                        <td class="td_sub_element_info" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                            Sub element # @(j + 1)
                                            <br />
                                            <a class="a_order_inline" @onclick="@(e => EditSubElement(local_of_i, local_of_j))" href=""><span class="oi oi-pencil" aria-hidden="true"></span></a>
                                            <a class="a_order_inline" @onclick="@(e => DeleteSubElement(local_of_i, local_of_j))" href=""><span class="oi oi-trash" aria-hidden="true"></span></a>
                                        </td>
                                        <td class="td_sub_element_info">
                                            <ul>
                                                <li>Element: @order.Windows[i].SubElements[j].Element</li>
                                                <li>Width: @order.Windows[i].SubElements[j].Width</li>
                                                <li>Height: @order.Windows[i].SubElements[j].Height</li>
                                                <li>Type: @order.Windows[i].SubElements[j].TypeAsString</li>
                                            </ul>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>
                    </tr>
                }
            </table>
        }

    </div>

    
    @if(windowBeingEdited){
        <div class="add_order_left_floated_item">
            <div class="row add_order_left_floated_item_header">
                <div class="col-md-12">
                    <h3>Edit Window</h3>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="WindowName"> Window Name *</label>
                        <input form="WindowName" class="form-control" @bind="@windowForEdit.Name" />
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="QuantityOfWindows"> Quantity Of Windows *</label>
                        <input form="QuantityOfWindows" type="number" class="form-control" @bind="@windowForEdit.QuantityOfWindows" />
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="TotalSubElements"> Total Sub Elements *</label>
                        <input form="TotalSubElements" type="number" class="form-control" @bind="@windowForEdit.TotalSubElements" />
                    </div>
                </div>
                <div class="col-md-12">
                    <a @onclick="SaveWindowEdits" class="btn btn-success">Save Changes</a>
                </div>
            </div>
        </div>
    }

    @if (orderBeingEdited)
    {
        <div class="add_order_left_floated_item">
            <div class="row add_order_left_floated_item_header">
                <div class="col-md-12">
                    <h3>Edit Order</h3>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="OrderNameForEdit"> Order Name *</label>
                        <input form="OrderNameForEdit" class="form-control" @bind="@order.Name" />
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="StateForEdit"> State *</label>
                        <input form="StateForEdit" class="form-control" @bind="@order.State" />
                    </div>
                </div>
                <div class="col-md-12">
                    <a @onclick="SaveOrderEdits" class="btn btn-success">Save Changes</a>
                </div>
            </div>
        </div>
    }

    @if (subElementBeingEdited)
    {
        <div class="add_order_left_floated_item">
            <div class="row add_order_left_floated_item_header">
                <div class="col-md-12">
                    <h3>Edit Sub Element</h3>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label> Type *</label>
                        <select class="form-control" @bind="@subElementForEdit.Type">
                            <option>Please Select</option>
                            <option value="1">Doors</option>
                            <option value="2">Window</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Width *</label>
                        <input type="number" class="form-control" @bind="@subElementForEdit.Width" />
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Height *</label>
                        <input type="number" class="form-control" @bind="@subElementForEdit.Height" />
                    </div>
                </div>
                <div class="col-md-12">
                    <a @onclick="SaveSubElementEdits" class="btn btn-success">Save Changes</a>
                </div>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public int order_id { get; set; } = 0;

    public bool windowBeingEdited = false;
    public bool orderBeingEdited = false;
    public bool subElementBeingEdited = false;

    OrderDto order = new OrderDto();
    WindowDto windowForEdit = new WindowDto();
    SubElementDto subElementForEdit = new SubElementDto();

    protected override async Task OnInitializedAsync()
    {
        order = await Http.GetFromJsonAsync<OrderDto>("api/Order/" + order_id);
        windowBeingEdited = false;
        orderBeingEdited = false;
        subElementBeingEdited = false;
    }

    private async Task EditOrder()
    {
        windowBeingEdited = false;
        orderBeingEdited = true;
        subElementBeingEdited = false;
    }

    private async Task SaveOrderEdits()
    {
        var response = await Http.PutAsJsonAsync("api/Order/" + order_id, @order);
        bool operationStatus = await response.Content.ReadFromJsonAsync<bool>();
        if (operationStatus)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Order edits saved successfully!");
            await JSRuntime.InvokeVoidAsync("window.location.reload");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
        }
    }

    private async Task EditWindow(int index)
    {
        windowBeingEdited = true;
        orderBeingEdited = false;
        subElementBeingEdited = false;
        windowForEdit = new WindowDto();
        windowForEdit.Id = order.Windows[index].Id;
        windowForEdit.Name = order.Windows[index].Name;
        windowForEdit.QuantityOfWindows = order.Windows[index].QuantityOfWindows;
        windowForEdit.TotalSubElements = order.Windows[index].TotalSubElements;
        windowForEdit.SubElements = order.Windows[index].SubElements;
    }

    private async Task SaveWindowEdits()
    {
        var response = await Http.PutAsJsonAsync("api/Window/" + @windowForEdit.Id, @windowForEdit);
        bool operationStatus = await response.Content.ReadFromJsonAsync<bool>();
        if (operationStatus)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Window edits saved successfully!");
            await JSRuntime.InvokeVoidAsync("window.location.reload");
        }
        else{
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
        }
    }

    private async Task DeleteWindow(int index)
    {
        if(order.Windows.Count <= 1){
            await JSRuntime.InvokeVoidAsync("alert", "You cannot delete windows from an order with 1 or less windows");
            return;
        }
        bool confirmStatus = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure that you want to delete?");
        if(confirmStatus){
            var response = await Http.DeleteAsync("api/Window/" + order.Windows[index].Id);
            bool operationStatus = await response.Content.ReadFromJsonAsync<bool>();
            if (operationStatus)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Window deleted successfully!");
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
            }
        }
    }

    private async Task EditSubElement(int window_index, int sub_element_index)
    {
        windowBeingEdited = false;
        orderBeingEdited = false;
        subElementBeingEdited = true;
        subElementForEdit = new SubElementDto();
        subElementForEdit.Id = order.Windows[window_index].SubElements[sub_element_index].Id;
        subElementForEdit.Width = order.Windows[window_index].SubElements[sub_element_index].Width;
        subElementForEdit.Height = order.Windows[window_index].SubElements[sub_element_index].Height;
        subElementForEdit.Element = order.Windows[window_index].SubElements[sub_element_index].Element;
        subElementForEdit.Type = order.Windows[window_index].SubElements[sub_element_index].Type;
    }

    private async Task SaveSubElementEdits()
    {
        var response = await Http.PutAsJsonAsync("api/SubElement/" + subElementForEdit.Id, subElementForEdit);
        bool operationStatus = await response.Content.ReadFromJsonAsync<bool>();
        if (operationStatus)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Sub element edits saved successfully!");
            await JSRuntime.InvokeVoidAsync("window.location.reload");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
        }
    }

    private async Task DeleteSubElement(int window_index, int sub_element_index)
    {
        if (order.Windows[window_index].SubElements.Count <= 1)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You cannot delete sub elements from a window with 1 or less sub elements");
            return;
        }
        bool confirmStatus = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure that you want to delete?");
        if (confirmStatus)
        {
            var response = await Http.DeleteAsync("api/SubElement/" + order.Windows[window_index].SubElements[sub_element_index].Id);
            bool operationStatus = await response.Content.ReadFromJsonAsync<bool>();
            if (operationStatus)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Sub element deleted successfully!");
                await JSRuntime.InvokeVoidAsync("window.location.reload");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
            }
        }
    }
}
